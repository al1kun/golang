package main

import "fmt"

func main() {
	BunnyGirlEp := NEpisode("Bunny Girl Sempai")
	obs1 := &Viewer{"Mai"}
	obs2 := &Viewer{"Sakuta"}
	obs3 := &Viewer{"Kaede"}

	BunnyGirlEp.attach(obs1)
	BunnyGirlEp.attach(obs2)
	BunnyGirlEp.attach(obs3)

	BunnyGirlEp.updateAvailability()

	BunnyGirlEp.detach(obs2)

	BunnyGirlEp.updateAvailability()

}

type Subject interface {
	attach(o Observer)
	detach(o Observer)
	notify()
}

type Observer interface {
	update(string)
	getName() string
}

type Viewer struct {
	name string
}

func (v *Viewer) update(t string) {
	fmt.Println("Yooooo!", v.name, "A new series of", t, "has been added!")
}
func (v *Viewer) getName() string {
	return v.name
}

type BGSEp struct {
	ObserverList []Observer
	name         string
	Uploaded     bool
}

func NEpisode(name string) *BGSEp {
	return &BGSEp{
		name: name,
	}
}

func (e *BGSEp) updateAvailability() {
	fmt.Println("Series", e.name, "has been successfully uploaded!")
	e.Uploaded = true
	e.notify()
}
func (e *BGSEp) attach(o Observer) {
	e.ObserverList = append(e.ObserverList, o)
}
func (e *BGSEp) detach(o Observer) {
	e.ObserverList = removeFromObserverList(e.ObserverList, o)
}
func (e *BGSEp) notify() {
	for _, viewer := range e.ObserverList {
		viewer.update(e.name)
	}
}
func removeFromObserverList(ObserverList []Observer, observerToRemove Observer) []Observer {
	observerListLen := len(ObserverList)
	for i, observer := range ObserverList {
		if observerToRemove.getName() == observer.getName() {
			ObserverList[observerListLen-1], ObserverList[i] = ObserverList[i], ObserverList[observerListLen-1]
			return ObserverList[:observerListLen-1]
		}
	}
	return ObserverList
}
